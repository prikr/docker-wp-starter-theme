{"version":3,"sources":["webpack://prikr-wp-starter/./src/js/cookieconsent.js","webpack://prikr-wp-starter/./node_modules/crumbsjs/dist/crumbs.js"],"names":["cookieNoticer","document","querySelector","declinedCookiesBtn","acceptedCookiesBtn","cookieNoticerCk","crumbs","cookieNoticerLs","gtmId","head","content","gaId","checkCookies","type","hasCookie","deleteCookieNotice","initGtm","setCookie","accepted","validation","wasVisible","remove","classList","add","setTimeout","window","gtmDidInit","script","createElement","async","onload","dataLayer","push","event","Date","getTime","src","appendChild","addEventListener","e","body","contains","initGa","_gaq","ga","location","protocol","s","getElementsByTagName","parentNode","insertBefore","module","exports","debug","setDebug","isDebug","this","throwError","isLsAvailable","test","localStorage","setItem","removeItem","err","console","set","name","value","expires","domain","Array","isArray","mass_set_cookies_array","forEach","v","hasOwnProperty","map","c","filter","x","cookie_expires","undefined","d","time","toLowerCase","setTime","toUTCString","cookie_to_be_added","cookie","get","all_cookies","decodeURIComponent","returned_cookie","split","length","getAll","delete","deleteAll","ls","key","JSON","stringify","asJSON","k","parse","getItem","return_array","idx","clear","factory"],"mappings":"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","file":"src_js_cookieconsent_js.scripts.min.js","sourcesContent":["import crumbs from 'crumbsjs';\r\n\r\nconst cookieNoticer = document.querySelector('#cookie_consent');\r\nconst declinedCookiesBtn = document.querySelector('#declineCookies');\r\nconst acceptedCookiesBtn = document.querySelector('#acceptCookies');\r\nconst cookieNoticerCk = crumbs.get('acceptedCookies');\r\nconst cookieNoticerLs = crumbs.ls.get('acceptedCookies');\r\nconst gtmId = document.head.querySelector(\"[name=gtm]\") ? document.head.querySelector(\"[name=gtm]\").content : '';\r\nconst gaId = document.head.querySelector(\"[name=ga]\") ? document.head.querySelector(\"[name=ga]\").content : '';\r\n\r\nwindow.addEventListener( 'load', (e) => {\r\n  if (document.body.contains(cookieNoticer)) {\r\n    checkCookies('cookie'); \r\n    checkCookies('localStorage');\r\n  }\r\n});\r\n\r\nif (document.body.contains(cookieNoticer)) {\r\n  declinedCookiesBtn.addEventListener('click', (e) => {\r\n    initGa();\r\n    setCookie('all', true);\r\n    deleteCookieNotice(true);\r\n  }, false);\r\n  acceptedCookiesBtn.addEventListener('click', (e) => {\r\n    initGtm();\r\n    initGa();\r\n    setCookie('all', true);\r\n    deleteCookieNotice(true);\r\n  }, false);\r\n}\r\n\r\nfunction checkCookies(type) {\r\n  let hasCookie = false;\r\n\r\n  if (type === 'cookie') {\r\n    if (cookieNoticerCk === 'declined') {\r\n      hasCookie = true;\r\n      deleteCookieNotice(false);\r\n    } else if (cookieNoticerCk === 'accepted') {\r\n      initGtm();\r\n      deleteCookieNotice(false);\r\n      hasCookie = true;\r\n    }\r\n  } \r\n  else if (type === 'localStorage') {\r\n    if (cookieNoticerLs === 'declined') {\r\n      hasCookie = true;\r\n      deleteCookieNotice(false);\r\n    } else if (cookieNoticerLs === 'accepted') {\r\n      initGtm();\r\n      deleteCookieNotice(false);\r\n      hasCookie = true;\r\n    }\r\n  }\r\n  return hasCookie;\r\n}\r\n\r\nfunction setCookie(type, accepted) {\r\n  let validation = accepted ? 'accepted' : 'declined';\r\n  return (type === 'localStorage') ? crumbs.ls.set(\"acceptedCookies\", validation) : (type === 'all') ? crumbs.ls.set(\"acceptedCookies\", validation) && crumbs.set(\"acceptedCookies\", validation) : crumbs.set(\"acceptedCookies\", validation);\r\n}\r\n\r\nfunction deleteCookieNotice(wasVisible) {\r\n  if (wasVisible) {\r\n    cookieNoticer.classList.add('cookieconsent__close');\r\n    setTimeout( () => {\r\n      return cookieNoticer.remove();\r\n    }, 15000)\r\n  } else {\r\n    return cookieNoticer.remove();\r\n  }\r\n}\r\n\r\nfunction initGtm () {\r\n\tif (window.gtmDidInit) return false;\r\n  if (gtmId === '' || gtmId === null || gtmId === undefined) return false;\r\n\twindow.gtmDidInit = true; // flag to ensure script does not get added to DOM more than once.\r\n\tconst script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.async = true;\r\n    script.onload = () => { dataLayer.push({ event: 'gtm.js', 'gtm.start': (new Date()).getTime(), 'gtm.uniqueEventId': 0 }); } // this part ensures PageViews is always tracked\r\n    script.src = 'https://www.googletagmanager.com/gtm.js?id=' + gtmId;\r\n\tdocument.head.appendChild(script);\r\n}\r\n\r\nvar _gaq = [];\r\n_gaq.push(['_setAccount', gaId]);\r\n_gaq.push(['_trackPageview']);\r\n\r\nfunction initGa() {\r\n  if (gaId === '' || gaId === null || gaId === undefined) return false;\r\n  const ga = document.createElement('script');\r\n  ga.type = 'text/javascript';\r\n  ga.async = true;\r\n  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\r\n\r\n  const s = document.getElementsByTagName('script')[0];\r\n  s.parentNode.insertBefore(ga, s);\r\n}","/*!\n  * CrumbsJS v0.1.1\n  * https://github.com/nirtz89/crumbsjs#readme\n  * Copyright 2018 - 2019, Nir Tzezana\n  * Licensed under MIT (https://github.com/nirtz89/crumbsjs/blob/master/LICENSE)\n  */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.crumbs = factory());\n}(this, (function () { 'use strict';\n\nconst crumbs = {\n  debug: false,\n  setDebug: function (isDebug) {\n    try {\n      this.debug = isDebug;\n    } catch (e) {\n      this.throwError(e);\n    }\n  },\n  isLsAvailable: function () {\n    let test = 'test';\n\n    try {\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  throwError: function (err, type = \"error\") {\n    console[type](`[crumbsJS] An error has occurred: ${err}`);\n  },\n  set: function (name, value, expires, domain) {\n    // Set a cookie, expires and domain are optional parameters\n    // Name can be an array of the \"set\" function elements or simply a string\n    // Expires on default when browser closes\n    // Domain on default is set to \"/\"\n    try {\n      if (Array.isArray(name)) {\n        // If name is an array, support mass set of cookies\n        var mass_set_cookies_array = name; // Name change for comfort purposes\n\n        mass_set_cookies_array.forEach(v => {\n          // Check to see correct setting format on all cookies with mass set\n          if (!v.hasOwnProperty(\"name\") || !v.hasOwnProperty(\"value\")) throw \"Mass cookie set failed, on or more object properties are incorrect.\";\n        });\n        var succeeded_set_cookies = mass_set_cookies_array.map(c => {\n          return this.set(c.name, c.value, c.expires, c.domain) ? c : false;\n        });\n        return succeeded_set_cookies.filter(x => {\n          return x;\n        });\n      }\n\n      var cookie_expires = \"\",\n          cookie_domain = \"path=/;\";\n\n      if (expires != undefined) {\n        var d = new Date();\n        var time = 1000 * 60 * 60 * 24;\n        \n\n        if (typeof expires == \"object\") {\n          switch (expires.type.toLowerCase()) {\n            case \"minute\":\n              time = 1000 * 60;\n              break;\n\n            case \"hour\":\n              time = 1000 * 60 * 60;\n              break;\n\n            case \"day\":\n              time = 1000 * 60 * 60 * 24;\n              break;\n\n            case \"week\":\n              time = 1000 * 60 * 60 * 24 * 7;\n              break;\n\n            case \"month\":\n              time = 1000 * 60 * 60 * 24 * 7 * 4;\n              break;\n\n            default:\n              throw 'Not a valid time type format (use minute, hour, day, week or month only)';\n              break;\n          }\n\n          expires = expires.value;\n        }\n\n        d.setTime(d.getTime() + expires * time);\n        d.toUTCString();\n        cookie_expires = `expires=${d}`;\n      }\n\n      cookie_domain = domain != undefined ? `path=${domain};` : domain;\n      let cookie_to_be_added = '' + `${name}=${value};${cookie_expires}ף${cookie_domain}`;\n      document.cookie = cookie_to_be_added;\n      return true;\n    } catch (e) {\n      this.throwError(e);\n      return false;\n    }\n  },\n  get: function (name) {\n    // Get a specific cookie by name, if no cookie was found, returns false\n    try {\n      var all_cookies = decodeURIComponent(document.cookie);\n      all_cookies = all_cookies.split(\"; \");\n      var returned_cookie = all_cookies.filter(c => {\n        var c = c.split(\"=\");\n        return c[0] === name ? 1 : 0;\n      });\n      return returned_cookie.length > 0 ? returned_cookie[0].split(\"=\")[1] : null;\n    } catch (e) {\n      this.throwError(e);\n      return false;\n    }\n  },\n  getAll: function () {\n    // Get all cookies in a key-pair object\n    try {\n      var all_cookies = decodeURIComponent(document.cookie);\n      all_cookies = all_cookies.split(\"; \");\n      return all_cookies[0] ? all_cookies.map(c => {\n        var c = c.split(\"=\");\n        return {\n          \"name\": c[0],\n          \"value\": c[1]\n        };\n      }) : false;\n    } catch (e) {\n      this.throwError(e);\n      return false;\n    }\n  },\n  delete: function (name) {\n    // Deletes a cookie by its name\n    try {\n      if (Array.isArray(name)) {\n        // If name is an array, support mass delete of cookies\n        var mass_set_cookies_array = name; // Name change for comfort purposes\n\n        mass_set_cookies_array.forEach(v => {\n          this.delete(v);\n        });\n        return true;\n      }\n\n      document.cookie = `${name}=''; expires=Thu, 01 Jan 1970 00:00:01 GMT`;\n      return true;\n    } catch (e) {\n      this.throwError(e);\n    }\n  },\n  deleteAll: function () {\n    // Deletes all cookies\n    try {\n      var all_cookies = decodeURIComponent(document.cookie);\n      all_cookies = all_cookies.split(\"; \").map(c => {\n        var c = c.split(\"=\");\n        return this.delete(c[0]);\n      });\n      return true;\n    } catch (e) {\n      this.throwError(e);\n    }\n  },\n  ls: {\n    // Local storage portion of the plugin\n    throwError: (e, type = \"error\") => {\n      // Refer back to the original throwError function, DRY\n      crumbs.throwError(e, type);\n    },\n    ls: window.localStorage,\n    // Shorter name, just for ease of use\n    set: function (key, value) {\n      // If localstorage is not available, fall back to using cookies\n      if (!crumbs.isLsAvailable()) {\n        this.throwError(\"Local Storage is not available, action was completed using cookies\", \"warn\");\n        return crumbs.set(key, value);\n      } // Set a key-value pair to the local storage\n\n\n      try {\n        if (Array.isArray(key)) {\n          // If key is an array, support mass set of local storage values\n          key.forEach(v => {\n            if (!v.hasOwnProperty(\"key\") || !v.hasOwnProperty(\"value\")) throw \"Mass key-value pair set failed, on or more object properties are incorrect.\";\n          });\n          return key.map(v => {\n            this.set(v.key, v.value);\n          }).filter(x => x);\n        }\n\n        this.ls.setItem(key, JSON.stringify(value));\n        return true;\n      } catch (e) {\n        this.throwError(e);\n        return false;\n      }\n    },\n    get: function (key, asJSON = true) {\n      // Gets key from local storage, always parsing the JSON unless stated otherwise\n      // If localstorage is not available, fall back to using cookies\n      if (!crumbs.isLsAvailable()) {\n        this.throwError(\"Local Storage is not available, action was completed using cookies\", \"warn\");\n        return crumbs.get(key);\n      }\n\n      try {\n        if (Array.isArray(key)) {\n          // If key is an array, support mass get of local storage values\n          return key.map(k => {\n            return {\n              \"key\": k,\n              \"value\": this.get(k)\n            };\n          }).filter(x => x);\n        }\n\n        return asJSON ? JSON.parse(this.ls.getItem(key)) : this.ls.getItem(key);\n      } catch (e) {\n        this.throwError(e);\n        return false;\n      }\n    },\n    getAll: function (asJSON = true) {\n      // If localstorage is not available, fall back to using cookies\n      if (!crumbs.isLsAvailable()) {\n        this.throwError(\"Local Storage is not available, action was completed using cookies\");\n        return crumbs.getAll();\n      }\n\n      try {\n        let return_array = [];\n\n        for (let idx in this.ls) {\n          if (idx == \"key\" || idx == \"getItem\" || idx == \"setItem\" || idx == \"removeItem\" || idx == \"clear\" || idx == \"length\") continue;\n          return_array.push({\n            \"key\": idx,\n            \"value\": asJSON ? JSON.parse(this.ls[idx]) : this.ls[idx]\n          });\n        }\n\n        return return_array;\n      } catch (e) {\n        this.throwError(e);\n        return false;\n      }\n    },\n    delete: function (key) {\n      // If localstorage is not available, fall back to using cookies\n      if (!crumbs.isLsAvailable()) {\n        this.throwError(\"Local Storage is not available, action was aborted\");\n        return false;\n      }\n\n      try {\n        this.ls.removeItem(key);\n        return true;\n      } catch (e) {\n        this.throwError(e);\n        return false;\n      }\n    },\n    deleteAll: function () {\n      // If localstorage is not available, fall back to using cookies\n      if (!crumbs.isLsAvailable()) {\n        this.throwError(\"Local Storage is not available, action was aborted\");\n        return false;\n      }\n\n      try {\n        this.ls.clear();\n        return true;\n      } catch (e) {\n        this.throwError(e);\n        return false;\n      }\n    }\n  }\n};\n\nreturn crumbs;\n\n})));\n"],"sourceRoot":""}